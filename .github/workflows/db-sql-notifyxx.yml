name: DB SQL Notify (no-block)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  notify:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect DB-related changes
        id: detect
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA")
          echo "$CHANGED_FILES" > /tmp/all_changed.txt

          DB_PATHS_REGEX="(^|/)(supabase/migrations/|supabase/seed/|prisma/schema\.prisma|src/.*/db/|server/.*/db/|db/|sql/|migrations/|.*\.sql$)"
          echo "$CHANGED_FILES" | grep -E "$DB_PATHS_REGEX" || true > /tmp/db_hits.txt

          if [ -s /tmp/db_hits.txt ]; then
            echo "db_changed=true" >> $GITHUB_OUTPUT
          else
            echo "db_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Look for provided SQL (optional)
        id: find_sql
        if: steps.detect.outputs.db_changed == 'true'
        run: |
          SQL_FILES=$(git ls-files ops/sql_to_apply/*.sql || true)
          if [ -z "$SQL_FILES" ]; then
            echo "found_sql=false" >> $GITHUB_OUTPUT
          else
            echo "$SQL_FILES" > /tmp/sql_files.txt
            echo "found_sql=true" >> $GITHUB_OUTPUT
          fi

      - name: Build sticky comment
        id: build_comment
        if: steps.detect.outputs.db_changed == 'true'
        run: |
          echo "<!-- DB_SQL_NOTIFY_STICKY -->" > /tmp/comment.md
          echo "### ðŸ”” Alerte Base de DonnÃ©es" >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "Des fichiers liÃ©s Ã  la DB ont changÃ© dans cette PR. **Aucune vÃ©rification bloquante n'est appliquÃ©e**." >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "**Fichiers dÃ©tectÃ©s (extrait):**" >> /tmp/comment.md
          head -n 100 /tmp/db_hits.txt | sed 's/^/- \`/; s/$/\`/' >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          echo "#### âœ… Ã€ faire" >> /tmp/comment.md
          echo "- [ ] Fournir (optionnel) un fichier SQL sous \`ops/sql_to_apply/\` pour application manuelle dans Supabase." >> /tmp/comment.md
          echo "- [ ] Remplir la section **Base de DonnÃ©es** du template de PR pour dÃ©crire l'impact." >> /tmp/comment.md
          echo "- [ ] Notifier @AhmedLimaiem si une action manuelle Supabase est requise." >> /tmp/comment.md
          echo "" >> /tmp/comment.md
          if [ "${{ steps.find_sql.outputs.found_sql }}" = "true" ]; then
            echo "#### ðŸ§¾ SQL joint dans la PR" >> /tmp/comment.md
            while read f; do
              echo "" >> /tmp/comment.md
              echo "<details><summary>\`$f\`</summary>" >> /tmp/comment.md
              echo "" >> /tmp/comment.md
              echo '```sql' >> /tmp/comment.md
              head -n 400 "$f" >> /tmp/comment.md
              echo '```' >> /tmp/comment.md
              echo "" >> /tmp/comment.md
              echo "</details>" >> /tmp/comment.md
            done < /tmp/sql_files.txt
          else
            echo "_Aucun fichier SQL fourni (ce n'est pas bloquant)._ " >> /tmp/comment.md
          fi
          echo "comment_path=/tmp/comment.md" >> $GITHUB_OUTPUT

      - name: Post/Update sticky comment
        if: steps.detect.outputs.db_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync(core.getInput('path'), 'utf8');
            const { owner, repo, number } = context.issue;
            const marker = "<!-- DB_SQL_NOTIFY_STICKY -->";
            const comments = await github.rest.issues.listComments({owner, repo, issue_number: number, per_page: 100});
            const existing = comments.data.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: number, body});
            }
          with:
            path: ${{ steps.build_comment.outputs.comment_path }}

      - name: Apply informational label
        if: steps.detect.outputs.db_changed == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            DB: Heads-up

      - name: Job summary
        run: |
          echo "### DB SQL Notify (no-block)" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.detect.outputs.db_changed }}" = "true" ]; then
            echo "- Changements DB: **OUI**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Changements DB: **NON**" >> $GITHUB_STEP_SUMMARY
          fi
